{"ast":null,"code":"export default function sketch(p, poop) {\n  let canvas;\n  let grid;\n  let cellSize;\n  let bg;\n  let color;\n  let start;\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth * .8, p.windowHeight * .8); // these will be hardcoded until I fond a way to pass props to setup, or force a refresh\n\n    bg = '#fff';\n    color = '#111'; // start = false\n    // p.noStroke()\n    // p.background(bg)\n    // cellSize = p.width / 50\n    // canvas.position(0, 0)\n    // grid = new Grid(cellSize)\n  };\n\n  p.draw = () => {\n    p.background(bg); // if (start) {\n    //   p.background(bg)\n    //   grid.update()\n    // }\n  };\n\n  p.windowResized = () => p.resizeCanvas(p.windowWidth * .8, p.windowHeight * .8);\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    bg = newProps.theme.complement;\n    color = newProps.theme.base;\n  }; // class Grid {\n  //   constructor(cellSize) {\n  //     this.cellSize = cellSize\n  //     this.grid = []\n  //     for (let x = 0; x < p.width; x += cellSize) {\n  //       let col = []\n  //       for (let y = 0; y < p.height; y += cellSize) {\n  //         col.push(new Cell(p.createVector(x + cellSize/2, y + cellSize/2), cellSize))\n  //       }\n  //       this.grid.push(col)\n  //     }\n  //   }\n  //   update() {\n  //     this.grid.forEach(col => {\n  //       col.forEach(cell => {\n  //         cell.draw()\n  //       })\n  //     })\n  //   }\n  // }\n  // }\n  //   class Cell {\n  //     constructor(pos, cellSize, color) {\n  //       this.pos = pos\n  //       this.cellSize = cellSize\n  //     }\n  //     draw() {\n  //       let mouse = p.createVector(p.mouseX, p.mouseY) \n  //       let mDist = mouse.dist(this.pos)\n  //       let scaledSize = this.cellSize * (5 / mDist)\n  //       if (scaledSize > this.cellSize/4) scaledSize = cellSize/4\n  //       p.fill(color)\n  //       p.ellipse(this.pos.x, this.pos.y, scaledSize)\n  //     }\n  //   }\n\n}","map":{"version":3,"sources":["/Users/ben/Repos/react-personal-site/src/particleMesh.js"],"names":["sketch","p","poop","canvas","grid","cellSize","bg","color","start","setup","createCanvas","windowWidth","windowHeight","draw","background","windowResized","resizeCanvas","myCustomRedrawAccordingToNewPropsHandler","newProps","theme","complement","base"],"mappings":"AAAA,eAAe,SAASA,MAAT,CAAgBC,CAAhB,EAAmBC,IAAnB,EAAyB;AACtC,MAAIC,MAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,KAAJ;;AAEAP,EAAAA,CAAC,CAACQ,KAAF,GAAU,MAAM;AACdN,IAAAA,MAAM,GAAGF,CAAC,CAACS,YAAF,CAAeT,CAAC,CAACU,WAAF,GAAgB,EAA/B,EAAmCV,CAAC,CAACW,YAAF,GAAiB,EAApD,CAAT,CADc,CAGd;;AACAN,IAAAA,EAAE,GAAG,MAAL;AACAC,IAAAA,KAAK,GAAE,MAAP,CALc,CAOd;AACA;AACA;AACA;AACA;AAEA;AACD,GAdD;;AAgBAN,EAAAA,CAAC,CAACY,IAAF,GAAS,MAAM;AACbZ,IAAAA,CAAC,CAACa,UAAF,CAAaR,EAAb,EADa,CAEb;AACA;AACA;AACA;AACD,GAND;;AAQAL,EAAAA,CAAC,CAACc,aAAF,GAAkB,MAAMd,CAAC,CAACe,YAAF,CAAef,CAAC,CAACU,WAAF,GAAgB,EAA/B,EAAmCV,CAAC,CAACW,YAAF,GAAiB,EAApD,CAAxB;;AAEAX,EAAAA,CAAC,CAACgB,wCAAF,GAA8CC,QAAD,IAAc;AACzDZ,IAAAA,EAAE,GAAGY,QAAQ,CAACC,KAAT,CAAeC,UAApB;AACAb,IAAAA,KAAK,GAAGW,QAAQ,CAACC,KAAT,CAAeE,IAAvB;AACD,GAHD,CAlCsC,CAuCtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEF;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACC","sourcesContent":["export default function sketch(p, poop) {\n  let canvas  \n  let grid\n  let cellSize\n  let bg\n  let color\n  let start\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth * .8, p.windowHeight * .8)\n    \n    // these will be hardcoded until I fond a way to pass props to setup, or force a refresh\n    bg = '#fff'\n    color= '#111'\n    \n    // start = false\n    // p.noStroke()\n    // p.background(bg)\n    // cellSize = p.width / 50\n    // canvas.position(0, 0)\n    \n    // grid = new Grid(cellSize)\n  }\n\n  p.draw = () => {\n    p.background(bg)\n    // if (start) {\n    //   p.background(bg)\n    //   grid.update()\n    // }\n  }\n\n  p.windowResized = () => p.resizeCanvas(p.windowWidth * .8, p.windowHeight * .8)\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    bg = newProps.theme.complement\n    color = newProps.theme.base\n  }\n\n  // class Grid {\n  //   constructor(cellSize) {\n  //     this.cellSize = cellSize\n  //     this.grid = []\n  //     for (let x = 0; x < p.width; x += cellSize) {\n  //       let col = []\n  //       for (let y = 0; y < p.height; y += cellSize) {\n  //         col.push(new Cell(p.createVector(x + cellSize/2, y + cellSize/2), cellSize))\n  //       }\n  //       this.grid.push(col)\n  //     }\n  //   }\n\n  //   update() {\n  //     this.grid.forEach(col => {\n  //       col.forEach(cell => {\n  //         cell.draw()\n  //       })\n  //     })\n  //   }\n  // }\n\n    \n  // }\n\n//   class Cell {\n//     constructor(pos, cellSize, color) {\n//       this.pos = pos\n//       this.cellSize = cellSize\n//     }\n\n//     draw() {\n//       let mouse = p.createVector(p.mouseX, p.mouseY) \n//       let mDist = mouse.dist(this.pos)\n//       let scaledSize = this.cellSize * (5 / mDist)\n      \n//       if (scaledSize > this.cellSize/4) scaledSize = cellSize/4\n//       p.fill(color)\n//       p.ellipse(this.pos.x, this.pos.y, scaledSize)\n//     }\n//   }\n}"]},"metadata":{},"sourceType":"module"}