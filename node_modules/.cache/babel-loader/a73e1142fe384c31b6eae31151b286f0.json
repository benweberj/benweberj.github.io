{"ast":null,"code":"export default function sketch(p) {\n  let canvas;\n  let nodes = [];\n  let maxDist = 200;\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    p.background('#0d1e35');\n\n    for (let i = 0; i < 10; i++) {\n      nodes.push(new Node(p, p.createVector(p.random(p.width), p.random(p.height)), maxDist, false));\n    }\n  };\n\n  p.draw = () => {\n    p.clear();\n    p.background('#0d1e35');\n    nodes.forEach(node => {\n      node.update();\n      let nearbyNodes = [];\n      nodes.forEach(other => {\n        if (other !== node && node.pos.dist(other.pos) <= maxDist) {\n          nearbyNodes.push(other);\n        }\n      });\n      nearbyNodes.push(p.createVector(p.mouseX, p.mouseY), maxDist, true);\n      node.neighbors = nearbyNodes;\n    });\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    if (canvas) {\n      p.fill(newProps.color);\n    }\n  };\n}\n\nclass Node {\n  constructor(p, origin, maxDist, isCursor) {\n    this.isCursor = isCursor;\n    this.p = p;\n    this.maxDist = maxDist;\n    this.neighbors = [];\n    this.r = p.random(3, 10);\n    this.rate = p.random(.5, 3);\n    this.respawn();\n    this.pos = origin;\n  }\n\n  respawn() {\n    this.pos = this.p.createVector(this.p.random(this.p.width), this.p.random(-300, -50));\n    this.vel = this.p.createVector(this.p.random(-this.rate, this.rate), this.p.random(this.rate));\n  }\n\n  update() {\n    this.pos.add(this.vel);\n    this.interract(this.neighbors); // draw\n\n    this.p.stroke('#fff');\n    this.p.strokeWeight(this.r);\n    this.p.point(this.pos.x, this.pos.y);\n    this.checkBounds();\n  }\n\n  interract(neighbors) {\n    neighbors.forEach(other => {\n      this.p.strokeWeight(this.mapRange(this.pos.dist(other.pos), 0, this.maxDist + 5, 1, 0));\n      this.p.stroke('#fff');\n      this.p.line(this.pos.x, this.pos.y, other.pos.x, other.pos.y);\n      let forceToThis = this.pos.copy().sub(other.pos).mult(.0001); // if (this.isMouse) forceToThis.mult(10)\n\n      other.vel.add(forceToThis);\n    });\n  }\n\n  mapRange(num, inMin, inMax, outMin, outMax) {\n    return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n  }\n\n  checkBounds() {}\n\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","canvas","nodes","maxDist","setup","createCanvas","windowWidth","windowHeight","background","i","push","Node","createVector","random","width","height","draw","clear","forEach","node","update","nearbyNodes","other","pos","dist","mouseX","mouseY","neighbors","myCustomRedrawAccordingToNewPropsHandler","newProps","fill","color","constructor","origin","isCursor","r","rate","respawn","vel","add","interract","stroke","strokeWeight","point","x","y","checkBounds","mapRange","line","forceToThis","copy","sub","mult","num","inMin","inMax","outMin","outMax"],"mappings":"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","sourcesContent":["export default function sketch(p) {\n  let canvas\n  let nodes = []\n  let maxDist = 200\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    p.background('#0d1e35')\n\n    for (let i = 0; i < 10; i++) {\n      nodes.push(new Node(p, p.createVector(p.random(p.width), p.random(p.height)), maxDist, false))\n    }\n  }\n\n  p.draw = () => {\n    p.clear()\n    p.background('#0d1e35')\n    nodes.forEach(node => {\n      node.update()\n\n      let nearbyNodes = []\n      nodes.forEach(other => {\n        if (other !== node && node.pos.dist(other.pos) <= maxDist) {\n          nearbyNodes.push(other)\n        }\n      })\n      nearbyNodes.push(p.createVector(p.mouseX, p.mouseY), maxDist, true)\n      node.neighbors = nearbyNodes\n    })\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if (canvas) {\n      p.fill(newProps.color)\n    }\n  }\n}\n\nclass Node {\n\n  constructor(p, origin, maxDist, isCursor) {\n    this.isCursor = isCursor\n    this.p = p\n    this.maxDist = maxDist\n    this.neighbors = []\n    this.r = p.random(3, 10)\n    this.rate = p.random(.5, 3)\n    this.respawn()\n    this.pos = origin\n  }\n\n  respawn() {\n    this.pos = this.p.createVector(this.p.random(this.p.width), this.p.random(-300, -50))\n    this.vel = this.p.createVector(this.p.random(-this.rate, this.rate), this.p.random(this.rate))\n  }\n\n  update() {\n    this.pos.add(this.vel)\n\n    this.interract(this.neighbors)\n\n    // draw\n    this.p.stroke('#fff')\n    this.p.strokeWeight(this.r)\n    this.p.point(this.pos.x, this.pos.y)\n\n    this.checkBounds()\n  }\n\n  interract(neighbors) {\n    neighbors.forEach(other => {\n      this.p.strokeWeight(this.mapRange(this.pos.dist(other.pos), 0, this.maxDist+5, 1, 0))\n      this.p.stroke('#fff')\n      this.p.line(this.pos.x, this.pos.y, other.pos.x, other.pos.y)\n\n      let forceToThis = this.pos.copy().sub(other.pos).mult(.0001)\n      // if (this.isMouse) forceToThis.mult(10)\n      other.vel.add(forceToThis)\n    })\n  }\n\n  mapRange(num, inMin, inMax, outMin, outMax) {\n    return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\n  }\n\n  checkBounds() {\n\n  }\n}"]},"metadata":{},"sourceType":"module"}