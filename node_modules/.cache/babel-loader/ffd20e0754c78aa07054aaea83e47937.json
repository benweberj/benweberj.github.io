{"ast":null,"code":"var _jsxFileName = \"/Users/ben/Desktop/react-personalsite/src/themeToggler.jsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport rgba from './bensLibrary'; // needed to use the 'props =>' format is so I had access to the used variable\n\nconst Toggler = styled.button(props => ({\n  opacity: .3,\n  padding: props.used ? '.5rem .5rem' : '.5rem 2rem',\n  borderRadius: '100px',\n  outline: 0,\n  border: 0,\n  fontWeight: props.theme.weight.regular,\n  background: props.theme.complement,\n  transition: 'all .5s ease',\n  display: 'block',\n  margin: 'auto',\n  position: 'absolute',\n  left: 0,\n  '&:hover': {\n    // boxShadow: function () {\n    //   if (props.theme.mode === 'dark') {\n    //     if (props.used) {\n    //       return '0 0 30px 8px rgba(255, 255, 255, 1)'\n    //     } else {\n    //       return '0 0 30px 8px rgba(255, 255, 255, .1)'\n    //     }\n    //   } else {\n    //     return false\n    //   }\n    // },\n    opacity: 1,\n    padding: !props.used && '.5rem 2.5rem',\n    transform: props.used && 'scale(1.2)'\n  } // (() => {\n  //   \n  //     props.used ? `0 0 30px 8px rgba(255, 255, 255, 1)` : `0 0 30px 8px rgba(255, 255, 255, .1)`\n  //   } else { \n  //     return false\n  //   }\n  // }),\n  // boxShadow: (props.theme.mode === 'dark' && props.used === true) && `0 0 20px 3px red`,\n\n}));\nlet used = false;\nexport default function ThemeToggler(props) {\n  if (!used) {\n    used = true;\n    return /*#__PURE__*/React.createElement(Toggler, {\n      onClick: props.toggleMode,\n      used: false,\n      className: props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(Toggler, {\n      onClick: props.toggleMode,\n      used: true,\n      className: props.className,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 12\n      }\n    });\n  } // return (\n  //\n  //\n  // TODO: figure out how to apply an animation on click. Having trouble referring to the \n  // button in order to add styles to it\n  //\n  //\n  // )\n\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/themeToggler.jsx"],"names":["React","styled","rgba","Toggler","button","props","opacity","padding","used","borderRadius","outline","border","fontWeight","theme","weight","regular","background","complement","transition","display","margin","position","left","transform","ThemeToggler","toggleMode","className"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB,C,CAEA;;AACA,MAAMC,OAAO,GAAGF,MAAM,CAACG,MAAP,CAAcC,KAAK,KAAK;AACtCC,EAAAA,OAAO,EAAE,EAD6B;AAEtCC,EAAAA,OAAO,EAAEF,KAAK,CAACG,IAAN,GAAa,aAAb,GAA6B,YAFA;AAGtCC,EAAAA,YAAY,EAAE,OAHwB;AAItCC,EAAAA,OAAO,EAAE,CAJ6B;AAKtCC,EAAAA,MAAM,EAAE,CAL8B;AAMtCC,EAAAA,UAAU,EAAEP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,OANO;AAOtCC,EAAAA,UAAU,EAAEX,KAAK,CAACQ,KAAN,CAAYI,UAPc;AAQtCC,EAAAA,UAAU,EAAE,cAR0B;AAStCC,EAAAA,OAAO,EAAE,OAT6B;AAUtCC,EAAAA,MAAM,EAAE,MAV8B;AAWtCC,EAAAA,QAAQ,EAAE,UAX4B;AAYtCC,EAAAA,IAAI,EAAE,CAZgC;AActC,aAAW;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,IAAAA,OAAO,EAAE,CAZA;AAaTC,IAAAA,OAAO,EAAE,CAACF,KAAK,CAACG,IAAP,IAAe,cAbf;AAcTe,IAAAA,SAAS,EAAElB,KAAK,CAACG,IAAN,IAAc;AAdhB,GAd2B,CA8BpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArCoC,CAAL,CAAnB,CAAhB;AAyCA,IAAIA,IAAI,GAAG,KAAX;AAEA,eAAe,SAASgB,YAAT,CAAuBnB,KAAvB,EAA8B;AAC3C,MAAI,CAACG,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAG,IAAP;AACA,wBAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAEH,KAAK,CAACoB,UAAxB;AAAoC,MAAA,IAAI,EAAE,KAA1C;AAAiD,MAAA,SAAS,EAAEpB,KAAK,CAACqB,SAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAHD,MAGO;AACL,wBAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAErB,KAAK,CAACoB,UAAxB;AAAoC,MAAA,IAAI,EAAE,IAA1C;AAAgD,MAAA,SAAS,EAAEpB,KAAK,CAACqB,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAN0C,CAS3C;AAGE;AACA;AACA;AACA;AACA;AACA;AACF;;AACD","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport rgba from './bensLibrary'\n\n// needed to use the 'props =>' format is so I had access to the used variable\nconst Toggler = styled.button(props => ({\n  opacity: .3,\n  padding: props.used ? '.5rem .5rem' : '.5rem 2rem',\n  borderRadius: '100px',\n  outline: 0,\n  border: 0,\n  fontWeight: props.theme.weight.regular,\n  background: props.theme.complement,\n  transition: 'all .5s ease',\n  display: 'block',\n  margin: 'auto',\n  position: 'absolute',\n  left: 0,\n\n  '&:hover': {\n    // boxShadow: function () {\n    //   if (props.theme.mode === 'dark') {\n    //     if (props.used) {\n    //       return '0 0 30px 8px rgba(255, 255, 255, 1)'\n    //     } else {\n    //       return '0 0 30px 8px rgba(255, 255, 255, .1)'\n    //     }\n    //   } else {\n    //     return false\n    //   }\n    // },\n    opacity: 1,\n    padding: !props.used && '.5rem 2.5rem',\n    transform: props.used && 'scale(1.2)'\n  },\n    // (() => {\n    //   \n    //     props.used ? `0 0 30px 8px rgba(255, 255, 255, 1)` : `0 0 30px 8px rgba(255, 255, 255, .1)`\n    //   } else { \n    //     return false\n    //   }\n    // }),\n    // boxShadow: (props.theme.mode === 'dark' && props.used === true) && `0 0 20px 3px red`,\n\n}))\n\nlet used = false;\n\nexport default function ThemeToggler (props) {\n  if (!used) {\n    used = true\n    return <Toggler onClick={props.toggleMode} used={false} className={props.className} />\n  } else {\n    return <Toggler onClick={props.toggleMode} used={true} className={props.className} />\n  }\n  \n\n  // return (\n    \n    \n    //\n    //\n    // TODO: figure out how to apply an animation on click. Having trouble referring to the \n    // button in order to add styles to it\n    //\n    //\n  // )\n}"]},"metadata":{},"sourceType":"module"}