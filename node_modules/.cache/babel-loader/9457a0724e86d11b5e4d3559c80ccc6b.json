{"ast":null,"code":"var _jsxFileName = \"/Users/ben/Desktop/react-personalsite/src/themeToggler.jsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport rgba from './bensLibrary';\nconst ThemeToggler_ = styled.button(props => ({\n  opacity: .3,\n  padding: props.used ? '.5rem .5rem' : '.5rem 2rem',\n  borderRadius: '100px',\n  outline: 0,\n  border: 0,\n  fontWeight: props.theme.weight.regular,\n  background: props.theme.complement,\n  transition: 'all .5s ease',\n  display: 'block',\n  margin: 'auto',\n  '&:hover': {\n    boxShadow: props.theme.mode === 'dark' && ``,\n    boxShadow: props.used ? '0 0 30px 8px rgba(255, 255, 255, .3)' : '',\n    opacity: 1,\n    padding: !props.used && '.5rem 2.5rem',\n    transform: props.used && 'scale(1.2)'\n  }\n}));\nlet used = false;\nexport default function ThemeToggler(props) {\n  if (!used) {\n    used = true;\n    return /*#__PURE__*/React.createElement(ThemeToggler_, {\n      onClick: props.toggleMode,\n      used: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(ThemeToggler_, {\n      onClick: props.toggleMode,\n      used: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 12\n      }\n    });\n  } // return (\n  //\n  //\n  // TODO: figure out how to apply an animation on click. Having trouble referring to the \n  // button in order to add styles to it\n  //\n  //\n  // )\n\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/themeToggler.jsx"],"names":["React","styled","rgba","ThemeToggler_","button","props","opacity","padding","used","borderRadius","outline","border","fontWeight","theme","weight","regular","background","complement","transition","display","margin","boxShadow","mode","transform","ThemeToggler","toggleMode"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,MAAMC,aAAa,GAAGF,MAAM,CAACG,MAAP,CAAcC,KAAK,KAAK;AAC5CC,EAAAA,OAAO,EAAE,EADmC;AAE5CC,EAAAA,OAAO,EAAEF,KAAK,CAACG,IAAN,GAAa,aAAb,GAA6B,YAFM;AAG5CC,EAAAA,YAAY,EAAE,OAH8B;AAI5CC,EAAAA,OAAO,EAAE,CAJmC;AAK5CC,EAAAA,MAAM,EAAE,CALoC;AAM5CC,EAAAA,UAAU,EAAEP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAmBC,OANa;AAO5CC,EAAAA,UAAU,EAAEX,KAAK,CAACQ,KAAN,CAAYI,UAPoB;AAQ5CC,EAAAA,UAAU,EAAE,cARgC;AAS5CC,EAAAA,OAAO,EAAE,OATmC;AAU5CC,EAAAA,MAAM,EAAE,MAVoC;AAY5C,aAAW;AACTC,IAAAA,SAAS,EAAEhB,KAAK,CAACQ,KAAN,CAAYS,IAAZ,KAAqB,MAArB,IAAgC,EADlC;AAETD,IAAAA,SAAS,EAAEhB,KAAK,CAACG,IAAN,GAAa,sCAAb,GAAsD,EAFxD;AAGTF,IAAAA,OAAO,EAAE,CAHA;AAITC,IAAAA,OAAO,EAAE,CAACF,KAAK,CAACG,IAAP,IAAe,cAJf;AAKTe,IAAAA,SAAS,EAAElB,KAAK,CAACG,IAAN,IAAc;AALhB;AAZiC,CAAL,CAAnB,CAAtB;AAqBA,IAAIA,IAAI,GAAG,KAAX;AAEA,eAAe,SAASgB,YAAT,CAAuBnB,KAAvB,EAA8B;AAC3C,MAAI,CAACG,IAAL,EAAW;AACTA,IAAAA,IAAI,GAAG,IAAP;AACA,wBAAO,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAEH,KAAK,CAACoB,UAA9B;AAA0C,MAAA,IAAI,EAAE,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAHD,MAGO;AACL,wBAAO,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAEpB,KAAK,CAACoB,UAA9B;AAA0C,MAAA,IAAI,EAAE,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAN0C,CAS3C;AAGE;AACA;AACA;AACA;AACA;AACA;AACF;;AACD","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport rgba from './bensLibrary'\n\nconst ThemeToggler_ = styled.button(props => ({\n  opacity: .3,\n  padding: props.used ? '.5rem .5rem' : '.5rem 2rem',\n  borderRadius: '100px',\n  outline: 0,\n  border: 0,\n  fontWeight: props.theme.weight.regular,\n  background: props.theme.complement,\n  transition: 'all .5s ease',\n  display: 'block',\n  margin: 'auto',\n\n  '&:hover': {\n    boxShadow: props.theme.mode === 'dark' && ``,\n    boxShadow: props.used ? '0 0 30px 8px rgba(255, 255, 255, .3)' : '',\n    opacity: 1,\n    padding: !props.used && '.5rem 2.5rem',\n    transform: props.used && 'scale(1.2)'\n  }\n}))\n\nlet used = false;\n\nexport default function ThemeToggler (props) {\n  if (!used) {\n    used = true\n    return <ThemeToggler_ onClick={props.toggleMode} used={false} />\n  } else {\n    return <ThemeToggler_ onClick={props.toggleMode} used={true} />\n  }\n  \n\n  // return (\n    \n    \n    //\n    //\n    // TODO: figure out how to apply an animation on click. Having trouble referring to the \n    // button in order to add styles to it\n    //\n    //\n  // )\n}"]},"metadata":{},"sourceType":"module"}