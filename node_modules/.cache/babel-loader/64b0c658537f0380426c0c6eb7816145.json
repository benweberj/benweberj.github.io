{"ast":null,"code":"export default function sketch(p) {\n  let canvas;\n  let grid;\n  let tileSize;\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    p.background('#0d1e35');\n    tileSize = p.width / 50;\n    p.rectMode(p.CENTER);\n    grid = new Grid(tileSize);\n  };\n\n  p.draw = () => {\n    p.clear(); // p.background('#0d1e35')\n\n    grid.update();\n  };\n\n  class Grid {\n    constructor(tileSize) {\n      this.tileSize = tileSize;\n      this.grid = [];\n\n      for (let x = 0; x < p.width; x += tileSize) {\n        let col = [];\n\n        for (let y = 0; y < p.height; y += tileSize) {\n          col.push(new Cell(x + tileSize / 2, y + tileSize / 2, tileSize));\n        }\n\n        this.grid.push(col);\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw();\n        }); // this.grid[curCol][curRow].highlight()\n      });\n      let curRow = Math.floor(p.mouseY / this.tileSize);\n      let curCol = Math.floor(p.mouseX / this.tileSize);\n      this.grid[curCol][curRow].highlight(); // console.log(p.mouseX / this.tileSize, p.mouseY)\n    }\n\n  }\n\n  class Cell {\n    constructor(x, y, tileSize) {\n      this.x = x;\n      this.y = y;\n      this.tileSize = tileSize;\n      this.brightness = 0;\n      this.randDist = p.random(100);\n    }\n\n    draw() {\n      p.noStroke(); // p.fill(255, this.brightness)\n\n      p.fill(255);\n      let mouse = p.createVector(p.mouseX, p.mouseY);\n      let pos = p.createVector(this.x, this.y);\n      let cellSize = this.tileSize * (10 / pos.dist(mouse));\n      if (cellSize > tileSize / 4) cellSize = tileSize / 4;\n      p.ellipse(this.x, this.y, cellSize);\n      p.strokeWeight(cellSize / 10);\n      p.stroke('#fff');\n      if (pos.dist(mouse) < this.randDist) p.line(mouse.x, mouse.y, pos.x, pos.y);\n      if (this.brightness > 0) this.brightness--;\n    }\n\n    highlight() {\n      // p.fill('#fff')\n      // p.noStroke()\n      // p.rect(this.x, this.y, this.tileSize)\n      this.brightness += 5;\n    }\n\n  } // p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n  //   if (canvas) {\n  //     p.fill(newProps.color)\n  //   }\n  // }\n\n} // class Cell {\n//   constructor(p, pos, tileSize) {\n//     this.p = p\n//     this.pos = pos\n//     this.tileSize = tileSize\n//   }\n//   draw() {\n//     this.p.fill('#aaa')\n//     this.p.rect(this.pos.x, this.pos.y, tileSize)\n//     this.checkHover()\n//   }\n//   checkHover() {\n//     let mouse = this.p.createVector(p.mouseX, p.mouseY)\n//     if (mouse.x >= this.pos.x && mouse.x < this.pos.x + this.tileSize && mouse.y >= this.pos.y && mouse.y < this.pos.y + this.tileSize) {\n//       this.p.fill('#fff')\n//       this.p.rect(this.pos.x, this.pos.y, tileSize)\n//     }\n//   }\n// }","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","canvas","grid","tileSize","setup","createCanvas","windowWidth","windowHeight","background","width","rectMode","CENTER","Grid","draw","clear","update","constructor","x","col","y","height","push","Cell","forEach","cell","curRow","Math","floor","mouseY","curCol","mouseX","highlight","brightness","randDist","random","noStroke","fill","mouse","createVector","pos","cellSize","dist","ellipse","strokeWeight","stroke","line"],"mappings":"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","sourcesContent":["export default function sketch(p) {\n  let canvas  \n  let grid\n  let tileSize\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    p.background('#0d1e35')\n    tileSize = p.width / 50\n    p.rectMode(p.CENTER)\n\n    grid = new Grid(tileSize)\n  }\n\n  p.draw = () => {\n    p.clear()\n    // p.background('#0d1e35')\n    grid.update()\n  }\n\n  class Grid {\n    constructor(tileSize) {\n      this.tileSize = tileSize\n      this.grid = []\n      for (let x = 0; x < p.width; x += tileSize) {\n        let col = []\n        for (let y = 0; y < p.height; y += tileSize) {\n          col.push(new Cell(x + tileSize/2, y + tileSize/2, tileSize))\n        }\n        this.grid.push(col)\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw()\n        })\n        // this.grid[curCol][curRow].highlight()\n      })\n      let curRow = Math.floor(p.mouseY / this.tileSize)\n      let curCol = Math.floor(p.mouseX / this.tileSize)\n      this.grid[curCol][curRow].highlight()\n      // console.log(p.mouseX / this.tileSize, p.mouseY)\n    }\n  }\n\n  class Cell {\n    constructor(x, y, tileSize) {\n      this.x = x\n      this.y = y\n      this.tileSize = tileSize\n      this.brightness = 0\n      this.randDist = p.random(100)\n    }\n\n    draw() {\n      p.noStroke()\n      // p.fill(255, this.brightness)\n      p.fill(255)\n      let mouse = p.createVector(p.mouseX, p.mouseY) \n      let pos = p.createVector(this.x, this.y)\n      let cellSize = this.tileSize * (10 / (pos.dist(mouse)))\n      if (cellSize > tileSize/4) cellSize = tileSize/4\n      p.ellipse(this.x, this.y, cellSize)\n      p.strokeWeight(cellSize/10)\n      p.stroke('#fff')\n      if (pos.dist(mouse) < this.randDist) p.line(mouse.x, mouse.y, pos.x, pos.y)\n      if (this.brightness > 0) this.brightness--\n    }\n\n    highlight() {\n      // p.fill('#fff')\n      // p.noStroke()\n      // p.rect(this.x, this.y, this.tileSize)\n      this.brightness+=5\n    }\n  }\n\n  // p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n  //   if (canvas) {\n  //     p.fill(newProps.color)\n  //   }\n  // }\n}\n\n\n\n// class Cell {\n//   constructor(p, pos, tileSize) {\n//     this.p = p\n//     this.pos = pos\n//     this.tileSize = tileSize\n//   }\n\n//   draw() {\n//     this.p.fill('#aaa')\n//     this.p.rect(this.pos.x, this.pos.y, tileSize)\n\n//     this.checkHover()\n//   }\n\n//   checkHover() {\n//     let mouse = this.p.createVector(p.mouseX, p.mouseY)\n//     if (mouse.x >= this.pos.x && mouse.x < this.pos.x + this.tileSize && mouse.y >= this.pos.y && mouse.y < this.pos.y + this.tileSize) {\n//       this.p.fill('#fff')\n//       this.p.rect(this.pos.x, this.pos.y, tileSize)\n//     }\n//   }\n// }"]},"metadata":{},"sourceType":"module"}