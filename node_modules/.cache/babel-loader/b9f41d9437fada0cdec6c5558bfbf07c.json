{"ast":null,"code":"export default function sketch(p) {\n  let canvas;\n  let grid;\n  let cellSize;\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    p.background('#0d1e35');\n    cellSize = p.width / 50;\n    canvas.position(0, 0);\n    grid = new Grid(cellSize);\n  };\n\n  p.draw = () => {\n    p.background('#0d1e35');\n    grid.update();\n  };\n\n  class Grid {\n    constructor(cellSize) {\n      this.cellSize = cellSize;\n      this.grid = [];\n\n      for (let x = 0; x < p.width; x += cellSize) {\n        let col = [];\n\n        for (let y = 0; y < p.height; y += cellSize) {\n          col.push(new Cell(p.createVector(x + cellSize / 2, y + cellSize / 2), cellSize));\n        }\n\n        this.grid.push(col);\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw();\n        });\n      });\n    }\n\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    // if (canvas) {\n    // }\n    console.log(newProps.theme);\n  };\n\n  class Cell {\n    constructor(pos, cellSize, color) {\n      this.pos = pos;\n      this.cellSize = cellSize;\n    }\n\n    draw() {\n      let mouse = p.createVector(p.mouseX, p.mouseY);\n      let mDist = mouse.dist(this.pos);\n      let scaledSize = this.cellSize * (5 / mDist);\n      if (scaledSize > this.cellSize / 4) scaledSize = cellSize / 4;\n      p.strokeWeight(scaledSize / 10);\n      p.stroke(255);\n      p.ellipse(this.pos.x, this.pos.y, scaledSize);\n    }\n\n  }\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","canvas","grid","cellSize","setup","createCanvas","windowWidth","windowHeight","background","width","position","Grid","draw","update","constructor","x","col","y","height","push","Cell","createVector","forEach","cell","myCustomRedrawAccordingToNewPropsHandler","newProps","console","log","theme","pos","color","mouse","mouseX","mouseY","mDist","dist","scaledSize","strokeWeight","stroke","ellipse"],"mappings":"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","sourcesContent":["export default function sketch(p) {\n  let canvas  \n  let grid\n  let cellSize\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    p.background('#0d1e35')\n    cellSize = p.width / 50\n    canvas.position(0, 0)\n\n    grid = new Grid(cellSize)\n  }\n\n  p.draw = () => {\n    p.background('#0d1e35')\n    grid.update()\n  }\n\n  class Grid {\n    constructor(cellSize) {\n      this.cellSize = cellSize\n      this.grid = []\n      for (let x = 0; x < p.width; x += cellSize) {\n        let col = []\n        for (let y = 0; y < p.height; y += cellSize) {\n          col.push(new Cell(p.createVector(x + cellSize/2, y + cellSize/2), cellSize))\n        }\n        this.grid.push(col)\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw()\n        })\n      })\n    }\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    // if (canvas) {\n      \n    // }\n    console.log(newProps.theme)\n  }\n\n  class Cell {\n    constructor(pos, cellSize, color) {\n      this.pos = pos\n      this.cellSize = cellSize\n    }\n\n    draw() {\n      let mouse = p.createVector(p.mouseX, p.mouseY) \n      let mDist = mouse.dist(this.pos)\n      let scaledSize = this.cellSize * (5 / mDist)\n      \n      if (scaledSize > this.cellSize/4) scaledSize = cellSize/4\n\n      p.strokeWeight(scaledSize/10)\n      p.stroke(255)\n      p.ellipse(this.pos.x, this.pos.y, scaledSize)\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}