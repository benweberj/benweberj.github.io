{"ast":null,"code":"export default function sketch(p, poop) {\n  let canvas;\n  let grid;\n  let cellSize;\n  let bg;\n  let color;\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight); // these will be hardcoded until I fond a way to pass props to setup, or force a refresh\n\n    bg = '#fff';\n    color = '#111';\n    p.noStroke();\n    p.background(bg);\n    cellSize = p.width / 50;\n    canvas.position(0, 0);\n    grid = new Grid(cellSize);\n  };\n\n  p.draw = () => {\n    p.background(bg);\n    grid.update();\n  };\n\n  class Grid {\n    constructor(cellSize) {\n      this.cellSize = cellSize;\n      this.grid = [];\n\n      for (let x = 0; x < p.width; x += cellSize) {\n        let col = [];\n\n        for (let y = 0; y < p.height; y += cellSize) {\n          col.push(new Cell(p.createVector(x + cellSize / 2, y + cellSize / 2), cellSize));\n        }\n\n        this.grid.push(col);\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw();\n        });\n      });\n    }\n\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    // if (canvas) {\n    bg = newProps.theme.base;\n    color = newProps.theme.complement; // }\n  };\n\n  class Cell {\n    constructor(pos, cellSize, color) {\n      this.pos = pos;\n      this.cellSize = cellSize;\n    }\n\n    draw() {\n      let mouse = p.createVector(p.mouseX, p.mouseY);\n      let mDist = mouse.dist(this.pos);\n      let scaledSize = this.cellSize * (5 / mDist);\n      if (scaledSize > this.cellSize / 4) scaledSize = cellSize / 4;\n      p.fill(21, 102, 111, 10);\n      p.ellipse(this.pos.x, this.pos.y, scaledSize);\n    }\n\n  }\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","poop","canvas","grid","cellSize","bg","color","setup","createCanvas","windowWidth","windowHeight","noStroke","background","width","position","Grid","draw","update","constructor","x","col","y","height","push","Cell","createVector","forEach","cell","myCustomRedrawAccordingToNewPropsHandler","newProps","theme","base","complement","pos","mouse","mouseX","mouseY","mDist","dist","scaledSize","fill","ellipse"],"mappings":"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","sourcesContent":["export default function sketch(p, poop) {\n  let canvas  \n  let grid\n  let cellSize\n  let bg\n  let color\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    \n    // these will be hardcoded until I fond a way to pass props to setup, or force a refresh\n    bg = '#fff'\n    color= '#111'\n    \n    p.noStroke()\n    p.background(bg)\n    cellSize = p.width / 50\n    canvas.position(0, 0)\n    \n    grid = new Grid(cellSize)\n  }\n\n  p.draw = () => {\n    p.background(bg)\n    grid.update()\n  }\n\n  class Grid {\n    constructor(cellSize) {\n      this.cellSize = cellSize\n      this.grid = []\n      for (let x = 0; x < p.width; x += cellSize) {\n        let col = []\n        for (let y = 0; y < p.height; y += cellSize) {\n          col.push(new Cell(p.createVector(x + cellSize/2, y + cellSize/2), cellSize))\n        }\n        this.grid.push(col)\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw()\n        })\n      })\n    }\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    // if (canvas) {\n      bg = newProps.theme.base\n      color = newProps.theme.complement\n    // }\n    \n  }\n\n  class Cell {\n    constructor(pos, cellSize, color) {\n      this.pos = pos\n      this.cellSize = cellSize\n    }\n\n    draw() {\n      let mouse = p.createVector(p.mouseX, p.mouseY) \n      let mDist = mouse.dist(this.pos)\n      let scaledSize = this.cellSize * (5 / mDist)\n      \n      if (scaledSize > this.cellSize/4) scaledSize = cellSize/4\n      p.fill(21, 102, 111, 10)\n      p.ellipse(this.pos.x, this.pos.y, scaledSize)\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}