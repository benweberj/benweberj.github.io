{"ast":null,"code":"export default function sketch(p) {\n  let canvas;\n  let nodes = [];\n  let maxDist = 200;\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    p.background('#0d1e35');\n\n    for (let i = 0; i < 10; i++) {\n      nodes.push(new Node(p, p.createVector(p.random(p.width), p.random(p.height)), maxDist));\n    }\n  };\n\n  p.draw = () => {\n    p.clear();\n    p.background('#0d1e35');\n    nodes.forEach(node => {\n      node.update();\n      let nearbyNodes = [];\n      nodes.forEach(other => {\n        if (other !== node && node.pos.dist(other.pos) <= maxDist) {\n          nearbyNodes.push(other);\n        }\n      });\n      node.neighbors = nearbyNodes;\n      let mouse = p.createVector(p.mouseX, p.mouseY);\n\n      if (mouse.dist(node.pos) <= maxDist) {\n        let dirToMouse = mouse.sub(node.pos);\n        let vector = dirToMouse.mult(10 / Math.pow(dirToMouse.mag(), 2));\n        node.vel.add(dirToMouse);\n      }\n    });\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    if (canvas) {\n      p.fill(newProps.color);\n    }\n  };\n}\n\nclass Node {\n  constructor(p, origin, maxDist) {\n    this.p = p;\n    this.maxDist = maxDist;\n    this.neighbors = [];\n    this.r = p.random(3, 10);\n    this.rate = p.random(.5, 3);\n    this.respawn();\n    this.pos = origin;\n  }\n\n  respawn() {\n    this.pos = this.p.createVector(this.p.random(this.p.width), this.p.random(-300, -50));\n    this.vel = this.p.createVector(this.p.random(-this.rate, this.rate), this.p.random(this.rate));\n  }\n\n  update() {\n    this.pos.add(this.vel);\n    this.interract(this.neighbors); // draw\n\n    this.p.stroke('#fff');\n    this.p.strokeWeight(this.r);\n    this.p.point(this.pos.x, this.pos.y);\n    this.checkBounds();\n  }\n\n  interract(neighbors) {\n    neighbors.forEach(other => {\n      this.p.strokeWeight(this.mapRange(this.pos.dist(other.pos), 0, this.maxDist + 5, 1, 0));\n      this.p.stroke('#fff');\n      this.p.line(this.pos.x, this.pos.y, other.pos.x, other.pos.y);\n      let forceToThis = this.pos.copy().sub(other.pos).mult(.0001);\n      other.vel.add(forceToThis);\n    });\n  }\n\n  mapRange(num, inMin, inMax, outMin, outMax) {\n    return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n  }\n\n  checkBounds() {}\n\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","canvas","nodes","maxDist","setup","createCanvas","windowWidth","windowHeight","background","i","push","Node","createVector","random","width","height","draw","clear","forEach","node","update","nearbyNodes","other","pos","dist","neighbors","mouse","mouseX","mouseY","dirToMouse","sub","vector","mult","Math","pow","mag","vel","add","myCustomRedrawAccordingToNewPropsHandler","newProps","fill","color","constructor","origin","r","rate","respawn","interract","stroke","strokeWeight","point","x","y","checkBounds","mapRange","line","forceToThis","copy","num","inMin","inMax","outMin","outMax"],"mappings":"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","sourcesContent":["export default function sketch(p) {\n  let canvas\n  let nodes = []\n  let maxDist = 200\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    p.background('#0d1e35')\n\n    for (let i = 0; i < 10; i++) {\n      nodes.push(new Node(p, p.createVector(p.random(p.width), p.random(p.height)), maxDist))\n    }\n  }\n\n  p.draw = () => {\n    p.clear()\n    p.background('#0d1e35')\n    nodes.forEach(node => {\n      node.update()\n\n      let nearbyNodes = []\n      nodes.forEach(other => {\n        if (other !== node && node.pos.dist(other.pos) <= maxDist) {\n          nearbyNodes.push(other)\n        }\n      })\n      node.neighbors = nearbyNodes\n\n      let mouse = p.createVector(p.mouseX, p.mouseY)\n      if (mouse.dist(node.pos) <= maxDist) {\n        let dirToMouse = mouse.sub(node.pos)\n        let vector = dirToMouse.mult(10 / Math.pow(dirToMouse.mag(), 2))\n        node.vel.add(dirToMouse)\n      }\n    })\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if (canvas) {\n      p.fill(newProps.color)\n    }\n  }\n}\n\nclass Node {\n\n  constructor(p, origin, maxDist) {\n    this.p = p\n    this.maxDist = maxDist\n    this.neighbors = []\n    this.r = p.random(3, 10)\n    this.rate = p.random(.5, 3)\n    this.respawn()\n    this.pos = origin\n  }\n\n  respawn() {\n    this.pos = this.p.createVector(this.p.random(this.p.width), this.p.random(-300, -50))\n    this.vel = this.p.createVector(this.p.random(-this.rate, this.rate), this.p.random(this.rate))\n  }\n\n  update() {\n    this.pos.add(this.vel)\n\n    this.interract(this.neighbors)\n\n    // draw\n    this.p.stroke('#fff')\n    this.p.strokeWeight(this.r)\n    this.p.point(this.pos.x, this.pos.y)\n\n    this.checkBounds()\n  }\n\n  interract(neighbors) {\n    neighbors.forEach(other => {\n      this.p.strokeWeight(this.mapRange(this.pos.dist(other.pos), 0, this.maxDist+5, 1, 0))\n      this.p.stroke('#fff')\n      this.p.line(this.pos.x, this.pos.y, other.pos.x, other.pos.y)\n\n      let forceToThis = this.pos.copy().sub(other.pos).mult(.0001)\n      other.vel.add(forceToThis)\n    })\n  }\n\n  mapRange(num, inMin, inMax, outMin, outMax) {\n    return (num - inMin) * (outMax - outMin) / (inMax - inMin) + outMin\n  }\n\n  checkBounds() {\n\n  }\n}"]},"metadata":{},"sourceType":"module"}