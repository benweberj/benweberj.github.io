{"ast":null,"code":"export default function sketch(p) {\n  let canvas;\n  let grid;\n  let tileSize;\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    p.background('#0d1e35');\n    tileSize = p.width / 50;\n    grid = new Grid(tileSize);\n  };\n\n  p.draw = () => {\n    // p.clear()\n    // p.background('#0d1e35')\n    // grid.forEach(col => {\n    //   col.forEach(cell => {\n    //     cell.draw()\n    //   })\n    // })\n    grid.update();\n  };\n\n  class Grid {\n    constructor(tileSize) {\n      this.grid = [];\n\n      for (let x = 0; x < p.width; x += tileSize) {\n        let col = [];\n\n        for (let y = 0; y < p.height; y += tileSize) {\n          col.push(new Cell(x, y, tileSize));\n        }\n\n        this.grid.push(col);\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw();\n        });\n        let r = Math.floor(p.height / this.tileSize);\n        let c = Math.floor(p.width / this.tileSize);\n        this.grid[r][c].highlight();\n      });\n    }\n\n  }\n\n  class Cell {\n    constructor(x, y, tileSize) {\n      this.x = x;\n      this.y = y;\n      this.tileSize = tileSize;\n    }\n\n    draw() {\n      p.fill('#5b9');\n      p.rect(this.x, this.y, this.tileSize);\n    }\n\n    highlight() {\n      p.fill('#fff');\n      p.rect(this.x, this.y, this.tileSize);\n    }\n\n  } // p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n  //   if (canvas) {\n  //     p.fill(newProps.color)\n  //   }\n  // }\n\n} // class Cell {\n//   constructor(p, pos, tileSize) {\n//     this.p = p\n//     this.pos = pos\n//     this.tileSize = tileSize\n//   }\n//   draw() {\n//     this.p.fill('#aaa')\n//     this.p.rect(this.pos.x, this.pos.y, tileSize)\n//     this.checkHover()\n//   }\n//   checkHover() {\n//     let mouse = this.p.createVector(p.mouseX, p.mouseY)\n//     if (mouse.x >= this.pos.x && mouse.x < this.pos.x + this.tileSize && mouse.y >= this.pos.y && mouse.y < this.pos.y + this.tileSize) {\n//       this.p.fill('#fff')\n//       this.p.rect(this.pos.x, this.pos.y, tileSize)\n//     }\n//   }\n// }","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","canvas","grid","tileSize","setup","createCanvas","windowWidth","windowHeight","background","width","Grid","draw","update","constructor","x","col","y","height","push","Cell","forEach","cell","r","Math","floor","c","highlight","fill","rect"],"mappings":"AAAA,eAAe,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;AAChC,MAAIC,MAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,QAAJ;;AAEAH,EAAAA,CAAC,CAACI,KAAF,GAAU,MAAM;AACdH,IAAAA,MAAM,GAAGD,CAAC,CAACK,YAAF,CAAeL,CAAC,CAACM,WAAjB,EAA8BN,CAAC,CAACO,YAAhC,CAAT;AACAP,IAAAA,CAAC,CAACQ,UAAF,CAAa,SAAb;AACAL,IAAAA,QAAQ,GAAGH,CAAC,CAACS,KAAF,GAAU,EAArB;AAEAP,IAAAA,IAAI,GAAG,IAAIQ,IAAJ,CAASP,QAAT,CAAP;AACD,GAND;;AAQAH,EAAAA,CAAC,CAACW,IAAF,GAAS,MAAM;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACAT,IAAAA,IAAI,CAACU,MAAL;AACD,GATD;;AAWA,QAAMF,IAAN,CAAW;AACTG,IAAAA,WAAW,CAACV,QAAD,EAAW;AACpB,WAAKD,IAAL,GAAY,EAAZ;;AACA,WAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,CAAC,CAACS,KAAtB,EAA6BK,CAAC,IAAIX,QAAlC,EAA4C;AAC1C,YAAIY,GAAG,GAAG,EAAV;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,CAAC,CAACiB,MAAtB,EAA8BD,CAAC,IAAIb,QAAnC,EAA6C;AAC3CY,UAAAA,GAAG,CAACG,IAAJ,CAAS,IAAIC,IAAJ,CAASL,CAAT,EAAYE,CAAZ,EAAeb,QAAf,CAAT;AACD;;AACD,aAAKD,IAAL,CAAUgB,IAAV,CAAeH,GAAf;AACD;AACF;;AAEDH,IAAAA,MAAM,GAAG;AACP,WAAKV,IAAL,CAAUkB,OAAV,CAAkBL,GAAG,IAAI;AACvBA,QAAAA,GAAG,CAACK,OAAJ,CAAYC,IAAI,IAAI;AAClBA,UAAAA,IAAI,CAACV,IAAL;AACD,SAFD;AAIA,YAAIW,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWxB,CAAC,CAACiB,MAAF,GAAW,KAAKd,QAA3B,CAAR;AACA,YAAIsB,CAAC,GAAGF,IAAI,CAACC,KAAL,CAAWxB,CAAC,CAACS,KAAF,GAAU,KAAKN,QAA1B,CAAR;AACA,aAAKD,IAAL,CAAUoB,CAAV,EAAaG,CAAb,EAAgBC,SAAhB;AACD,OARD;AASD;;AAtBQ;;AAyBX,QAAMP,IAAN,CAAW;AACTN,IAAAA,WAAW,CAACC,CAAD,EAAIE,CAAJ,EAAOb,QAAP,EAAiB;AAC1B,WAAKW,CAAL,GAASA,CAAT;AACA,WAAKE,CAAL,GAASA,CAAT;AACA,WAAKb,QAAL,GAAgBA,QAAhB;AACD;;AAEDQ,IAAAA,IAAI,GAAG;AACLX,MAAAA,CAAC,CAAC2B,IAAF,CAAO,MAAP;AACA3B,MAAAA,CAAC,CAAC4B,IAAF,CAAO,KAAKd,CAAZ,EAAe,KAAKE,CAApB,EAAuB,KAAKb,QAA5B;AACD;;AAEDuB,IAAAA,SAAS,GAAG;AACV1B,MAAAA,CAAC,CAAC2B,IAAF,CAAO,MAAP;AACA3B,MAAAA,CAAC,CAAC4B,IAAF,CAAO,KAAKd,CAAZ,EAAe,KAAKE,CAApB,EAAuB,KAAKb,QAA5B;AACD;;AAfQ,GAjDqB,CAmEhC;AACA;AACA;AACA;AACA;;AACD,C,CAID;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["export default function sketch(p) {\n  let canvas  \n  let grid\n  let tileSize\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    p.background('#0d1e35')\n    tileSize = p.width / 50\n\n    grid = new Grid(tileSize)\n  }\n\n  p.draw = () => {\n    // p.clear()\n    // p.background('#0d1e35')\n    // grid.forEach(col => {\n    //   col.forEach(cell => {\n    //     cell.draw()\n    //   })\n    // })\n    grid.update()\n  }\n\n  class Grid {\n    constructor(tileSize) {\n      this.grid = []\n      for (let x = 0; x < p.width; x += tileSize) {\n        let col = []\n        for (let y = 0; y < p.height; y += tileSize) {\n          col.push(new Cell(x, y, tileSize))\n        }\n        this.grid.push(col)\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw()\n        })\n\n        let r = Math.floor(p.height / this.tileSize)\n        let c = Math.floor(p.width / this.tileSize)\n        this.grid[r][c].highlight()\n      })\n    }\n  }\n\n  class Cell {\n    constructor(x, y, tileSize) {\n      this.x = x\n      this.y = y\n      this.tileSize = tileSize\n    }\n\n    draw() {\n      p.fill('#5b9')\n      p.rect(this.x, this.y, this.tileSize)\n    }\n\n    highlight() {\n      p.fill('#fff')\n      p.rect(this.x, this.y, this.tileSize)\n    }\n  }\n\n  // p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n  //   if (canvas) {\n  //     p.fill(newProps.color)\n  //   }\n  // }\n}\n\n\n\n// class Cell {\n//   constructor(p, pos, tileSize) {\n//     this.p = p\n//     this.pos = pos\n//     this.tileSize = tileSize\n//   }\n\n//   draw() {\n//     this.p.fill('#aaa')\n//     this.p.rect(this.pos.x, this.pos.y, tileSize)\n\n//     this.checkHover()\n//   }\n\n//   checkHover() {\n//     let mouse = this.p.createVector(p.mouseX, p.mouseY)\n//     if (mouse.x >= this.pos.x && mouse.x < this.pos.x + this.tileSize && mouse.y >= this.pos.y && mouse.y < this.pos.y + this.tileSize) {\n//       this.p.fill('#fff')\n//       this.p.rect(this.pos.x, this.pos.y, tileSize)\n//     }\n//   }\n// }"]},"metadata":{},"sourceType":"module"}