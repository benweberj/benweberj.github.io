{"ast":null,"code":"import Particle from './sketches/';\nexport default ((p, poop) => {\n  let canvas;\n  let bg;\n  let color;\n  let particles;\n  let birds;\n  let particleCount;\n  let connectionDist;\n  let attraction;\n  let attractionDist;\n  let repulseMultiplier;\n\n  p.preload = _ => {// birds = loadSound('birds.mp3')\n  };\n\n  p.setup = _ => {\n    canvas = p.createCanvas(p.windowWidth * .8, p.windowHeight * .8);\n    bg = '#111';\n    color = '#fff';\n    particles = [];\n    particleCount = 100;\n    connectionDist = 100;\n    attraction = 5;\n    attractionDist = 500;\n    repulseMultiplier = 50; // birds.play()\n\n    for (let i = 0; i < particleCount; i++) {\n      particles.push(new Particle(p));\n    }\n  };\n\n  p.draw = _ => {\n    p.background(bg);\n    let mouse = p.createVector(p.mouseX, p.mouseY);\n    particles.forEach(particle => {\n      particle.move();\n      let mouseDist = particle.pos.dist(mouse);\n\n      if (mouseDist < attractionDist) {\n        let dir = mouse.copy().sub(particle.pos);\n\n        if (p.mouseIsPressed) {\n          dir.mult(-repulseMultiplier);\n        }\n\n        particle.applyForce(dir.mult(attraction));\n      }\n\n      particles.forEach(other => {\n        if (particle !== other) {\n          let dist = particle.pos.dist(other.pos);\n\n          if (dist < connectionDist) {\n            let strength = Math.pow(15 / dist, 2);\n            strength = p.constrain(strength, 0, 2);\n            p.stroke(color);\n            p.strokeWeight(strength);\n            p.line(particle.pos.x, particle.pos.y, other.pos.x, other.pos.y);\n          }\n        }\n      });\n    });\n  };\n\n  p.windowResized = _ => p.resizeCanvas(p.windowWidth * .8, p.windowHeight * .8);\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    bg = newProps.theme.complement;\n    color = newProps.theme.base;\n  };\n});","map":{"version":3,"sources":["/Users/ben/Repos/react-personal-site/src/sketches/particleMesh.js"],"names":["Particle","p","poop","canvas","bg","color","particles","birds","particleCount","connectionDist","attraction","attractionDist","repulseMultiplier","preload","_","setup","createCanvas","windowWidth","windowHeight","i","push","draw","background","mouse","createVector","mouseX","mouseY","forEach","particle","move","mouseDist","pos","dist","dir","copy","sub","mouseIsPressed","mult","applyForce","other","strength","Math","pow","constrain","stroke","strokeWeight","line","x","y","windowResized","resizeCanvas","myCustomRedrawAccordingToNewPropsHandler","newProps","theme","complement","base"],"mappings":"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","sourcesContent":["import Particle from './sketches/'\n\nexport default (p, poop) => {\n  let canvas\n  let bg\n  let color\n\n  let particles\n  let birds\n  let particleCount\n  let connectionDist\n  let attraction\n  let attractionDist\n  let repulseMultiplier\n\n  p.preload = _ => {\n    // birds = loadSound('birds.mp3')\n  }\n\n  p.setup = _ => {\n    canvas = p.createCanvas(p.windowWidth * .8, p.windowHeight * .8)\n    bg = '#111'\n    color= '#fff'\n    particles = []\n    particleCount = 100\n    connectionDist = 100\n    attraction = 5\n    attractionDist = 500\n    repulseMultiplier = 50\n    // birds.play()\n\n    for (let i = 0; i < particleCount; i++) {\n      particles.push(new Particle(p));\n    }\n  }\n\n  p.draw = _ => {\n    p.background(bg)\n\n    let mouse = p.createVector(p.mouseX, p.mouseY)\n    particles.forEach(particle => {\n      particle.move()\n      let mouseDist = particle.pos.dist(mouse)\n      if (mouseDist < attractionDist) {\n        let dir = mouse.copy().sub(particle.pos)\n        if (p.mouseIsPressed) {\n          dir.mult(-repulseMultiplier)\n        }\n        particle.applyForce(dir.mult(attraction))\n      }\n\n      particles.forEach(other => {\n        if (particle !== other) {\n          let dist = particle.pos.dist(other.pos);\n\n          if (dist < connectionDist) {\n            let strength = Math.pow(15 / dist, 2);\n            strength = p.constrain(strength, 0, 2);\n            p.stroke(color)\n            p.strokeWeight(strength)\n            p.line(particle.pos.x, particle.pos.y, other.pos.x, other.pos.y);\n          }\n        }\n      })\n    })\n  }\n\n  p.windowResized = _ => p.resizeCanvas(p.windowWidth * .8, p.windowHeight * .8)\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    bg = newProps.theme.complement\n    color = newProps.theme.base\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}