{"ast":null,"code":"export default function sketch(p) {\n  let canvas;\n  let grid;\n  let cellSize;\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    p.background('#0d1e35');\n    cellSize = p.width / 50;\n    p.rectMode(p.CENTER);\n    grid = new Grid(cellSize);\n  };\n\n  p.draw = () => {\n    p.background('#0d1e35');\n    grid.update();\n  };\n\n  class Grid {\n    constructor(cellSize) {\n      this.cellSize = cellSize;\n      this.grid = [];\n\n      for (let x = 0; x < p.width; x += cellSize) {\n        let col = [];\n\n        for (let y = 0; y < p.height; y += cellSize) {\n          col.push(new Cell(p.createVector(x + cellSize / 2, y + cellSize / 2), cellSize));\n        }\n\n        this.grid.push(col);\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw();\n        });\n      }); // let curRow = Math.floor(p.mouseY / this.cellSize)\n      // let curCol = Math.floor(p.mouseX / this.cellSize)\n      // this.grid[curCol][curRow].highlight()\n    }\n\n  }\n\n  class Cell {\n    constructor(pos, cellSize) {\n      this.x = x;\n      this.cellSize = cellSize; // this.brightness = 0\n\n      this.randDist = p.random(100);\n    }\n\n    draw() {\n      // p.noStroke()\n      // p.fill(255, this.brightness)\n      // p.fill(255)\n      let mouse = p.createVector(p.mouseX, p.mouseY);\n      let mDist = mouse.dist(this.pos);\n      let scaledSize = this.cellSize * (10 / mDist);\n      if (scaledSize > this.cellSize / 4) scaledSize = cellSize / 4;\n      p.strokeWeight(scaledSize / 10);\n      p.stroke(255);\n      p.ellipse(this.pos.x, this.pos.y, scaledSize); // if (pos.dist(mouse) < this.randDist) p.line(mouse.x, mouse.y, pos.x, pos.y)\n      // if (this.brightness > 0) this.brightness--\n    } // highlight() {\n    //   // p.fill('#fff')\n    //   // p.noStroke()\n    //   // p.rect(this.x, this.y, this.cellSize)\n    //   this.brightness+=5\n    // }\n\n\n  } // p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n  //   if (canvas) {\n  //     p.fill(newProps.color)\n  //   }\n  // }\n\n} // class Cell {\n//   constructor(p, pos, cellSize) {\n//     this.p = p\n//     this.pos = pos\n//     this.cellSize = cellSize\n//   }\n//   draw() {\n//     this.p.fill('#aaa')\n//     this.p.rect(this.pos.x, this.pos.y, cellSize)\n//     this.checkHover()\n//   }\n//   checkHover() {\n//     let mouse = this.p.createVector(p.mouseX, p.mouseY)\n//     if (mouse.x >= this.pos.x && mouse.x < this.pos.x + this.cellSize && mouse.y >= this.pos.y && mouse.y < this.pos.y + this.cellSize) {\n//       this.p.fill('#fff')\n//       this.p.rect(this.pos.x, this.pos.y, cellSize)\n//     }\n//   }\n// }","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","canvas","grid","cellSize","setup","createCanvas","windowWidth","windowHeight","background","width","rectMode","CENTER","Grid","draw","update","constructor","x","col","y","height","push","Cell","createVector","forEach","cell","pos","randDist","random","mouse","mouseX","mouseY","mDist","dist","scaledSize","strokeWeight","stroke","ellipse"],"mappings":"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","sourcesContent":["export default function sketch(p) {\n  let canvas  \n  let grid\n  let cellSize\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    p.background('#0d1e35')\n    cellSize = p.width / 50\n    p.rectMode(p.CENTER)\n\n    grid = new Grid(cellSize)\n  }\n\n  p.draw = () => {\n    p.background('#0d1e35')\n    grid.update()\n  }\n\n  class Grid {\n    constructor(cellSize) {\n      this.cellSize = cellSize\n      this.grid = []\n      for (let x = 0; x < p.width; x += cellSize) {\n        let col = []\n        for (let y = 0; y < p.height; y += cellSize) {\n          col.push(new Cell(p.createVector(x + cellSize/2, y + cellSize/2), cellSize))\n        }\n        this.grid.push(col)\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw()\n        })\n      })\n\n      // let curRow = Math.floor(p.mouseY / this.cellSize)\n      // let curCol = Math.floor(p.mouseX / this.cellSize)\n      // this.grid[curCol][curRow].highlight()\n    }\n  }\n\n  class Cell {\n    constructor(pos, cellSize) {\n      this.x = x\n      this.cellSize = cellSize\n      // this.brightness = 0\n      this.randDist = p.random(100)\n    }\n\n    draw() {\n      // p.noStroke()\n      // p.fill(255, this.brightness)\n      // p.fill(255)\n      let mouse = p.createVector(p.mouseX, p.mouseY) \n      let mDist = mouse.dist(this.pos)\n      let scaledSize = this.cellSize * (10 / mDist)\n      \n      if (scaledSize > this.cellSize/4) scaledSize = cellSize/4\n\n      p.strokeWeight(scaledSize/10)\n      p.stroke(255)\n      p.ellipse(this.pos.x, this.pos.y, scaledSize)\n      // if (pos.dist(mouse) < this.randDist) p.line(mouse.x, mouse.y, pos.x, pos.y)\n      // if (this.brightness > 0) this.brightness--\n    }\n\n    // highlight() {\n    //   // p.fill('#fff')\n    //   // p.noStroke()\n    //   // p.rect(this.x, this.y, this.cellSize)\n    //   this.brightness+=5\n    // }\n  }\n\n  // p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n  //   if (canvas) {\n  //     p.fill(newProps.color)\n  //   }\n  // }\n}\n\n\n\n// class Cell {\n//   constructor(p, pos, cellSize) {\n//     this.p = p\n//     this.pos = pos\n//     this.cellSize = cellSize\n//   }\n\n//   draw() {\n//     this.p.fill('#aaa')\n//     this.p.rect(this.pos.x, this.pos.y, cellSize)\n\n//     this.checkHover()\n//   }\n\n//   checkHover() {\n//     let mouse = this.p.createVector(p.mouseX, p.mouseY)\n//     if (mouse.x >= this.pos.x && mouse.x < this.pos.x + this.cellSize && mouse.y >= this.pos.y && mouse.y < this.pos.y + this.cellSize) {\n//       this.p.fill('#fff')\n//       this.p.rect(this.pos.x, this.pos.y, cellSize)\n//     }\n//   }\n// }"]},"metadata":{},"sourceType":"module"}