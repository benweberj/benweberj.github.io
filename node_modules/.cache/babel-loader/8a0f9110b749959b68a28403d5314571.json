{"ast":null,"code":"export default function sketch(p) {\n  let canvas;\n  let nodes = [];\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    p.background('#0d1e35');\n\n    for (let i = 0; i < 10; i++) {\n      nodes.push(new Node(p, p.createVector(p.random(p.width), p.random(p.height))));\n    }\n  };\n\n  p.draw = () => {\n    p.clear();\n    p.background('#0d1e35');\n    nodes.forEach(node => {\n      node.update();\n      let nearbyNodes = [];\n      nodes.forEach(other => {\n        if (other !== node && node.pos.dist(other.pos) <= 500) {\n          nearbyNodes.push(other);\n        }\n      });\n      node.neighbors = nearbyNodes;\n    });\n  };\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    if (canvas) {\n      p.fill(newProps.color);\n    }\n  };\n}\n\nclass Node {\n  constructor(p, origin) {\n    this.neighbors = [];\n    this.r = p.random(3, 10);\n    this.rate = p.random(.5, 4);\n    this.p = p;\n    this.respawn();\n  }\n\n  respawn() {\n    this.pos = this.p.createVector(this.p.random(this.p.width), this.p.random(-300, -50));\n    this.vel = this.p.createVector(this.p.random(-this.rate / 2, this.rate / 2), this.p.random(this.rate));\n  }\n\n  update() {\n    this.pos.add(this.vel);\n    this.interract(this.neighbors); // draw\n\n    this.p.stroke('#fff');\n    this.p.strokeWeight(this.r);\n    this.p.point(this.pos.x, this.pos.y);\n    this.checkBounds();\n  }\n\n  interract(neighbors) {\n    neighbors.forEach(other => {\n      this.p.strokeWeight(this.pos.dist(other.dist));\n      this.p.stroke('#fff');\n      this.p.line(this.pos.x, this.pos.y, other.pos.x, other.pos.y);\n    });\n  }\n\n  checkBounds() {}\n\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","canvas","nodes","setup","createCanvas","windowWidth","windowHeight","background","i","push","Node","createVector","random","width","height","draw","clear","forEach","node","update","nearbyNodes","other","pos","dist","neighbors","myCustomRedrawAccordingToNewPropsHandler","newProps","fill","color","constructor","origin","r","rate","respawn","vel","add","interract","stroke","strokeWeight","point","x","y","checkBounds","line"],"mappings":"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","sourcesContent":["export default function sketch(p) {\n  let canvas\n  let nodes = []\n\n  p.setup = () => {\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    p.background('#0d1e35')\n\n    for (let i = 0; i < 10; i++) {\n      nodes.push(new Node(p, p.createVector(p.random(p.width), p.random(p.height))))\n    }\n  }\n\n  p.draw = () => {\n    p.clear()\n    p.background('#0d1e35')\n    nodes.forEach(node => {\n      node.update()\n      \n      let nearbyNodes = []\n      nodes.forEach(other => {\n        if (other !== node && node.pos.dist(other.pos) <= 500) {\n          nearbyNodes.push(other)\n        }\n      })\n      node.neighbors = nearbyNodes\n    })\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    if (canvas) {\n      p.fill(newProps.color)\n    }\n  }\n}\n\nclass Node {\n  \n  constructor(p, origin) {\n    this.neighbors = []\n    this.r = p.random(3, 10)\n    this.rate = p.random(.5, 4)\n    this.p = p\n    this.respawn()\n  }\n\n  respawn() {\n    this.pos = this.p.createVector(this.p.random(this.p.width), this.p.random(-300, -50))\n    this.vel = this.p.createVector(this.p.random(-this.rate/2, this.rate/2), this.p.random(this.rate))\n  }\n\n  update() {\n    this.pos.add(this.vel)\n    \n    this.interract(this.neighbors)\n\n    // draw\n    this.p.stroke('#fff')\n    this.p.strokeWeight(this.r)\n    this.p.point(this.pos.x, this.pos.y)\n    \n    this.checkBounds()\n  }\n\n  interract(neighbors) {\n    neighbors.forEach(other => {\n      this.p.strokeWeight(this.pos.dist(other.dist))\n      this.p.stroke('#fff')\n      this.p.line(this.pos.x, this.pos.y, other.pos.x, other.pos.y)\n    })\n  }\n\n  checkBounds() {\n\n  }\n}"]},"metadata":{},"sourceType":"module"}