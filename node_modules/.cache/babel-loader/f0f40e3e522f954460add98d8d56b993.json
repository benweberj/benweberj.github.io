{"ast":null,"code":"var _jsxFileName = \"/Users/ben/Desktop/react-personalsite/src/components/text.jsx\";\nimport React from 'react';\nimport styled from 'styled-components'; // import rgba from './bensLibrary'\n// I feel like theres a way to do this with a single function using bracket notation to call 'styled.h1' with 'styled['h1']'\n\nconst H1 = styled.h1(props => ({\n  marginTop: '3rem',\n  color: props.color ? props.color : props.theme.primary,\n  fontSize: '3rem',\n  fontWeight: props.weight ? props.weight : props.theme.weight.regular\n}));\nconst H2 = styled.h2(props => ({\n  marginTop: '1rem',\n  color: props.color ? props.color : props.theme.accent,\n  fontSize: '2rem',\n  fontWeight: props.weight ? props.weight : props.theme.weight.regular\n}));\nconst P = styled.p(props => ({\n  color: props.color ? props.color : props.theme.complement,\n  fontSize: '1.5rem',\n  lineHeight: '2rem',\n  fontWeight: props.weight ? props.weight : props.theme.weight.thin\n}));\nexport default function Text(props) {\n  // there has to be a better way to do this\n  if (props.type === 'h1') {\n    return /*#__PURE__*/React.createElement(H1, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 12\n      }\n    }), props.children);\n  } else if (props.type === 'h2') {\n    return /*#__PURE__*/React.createElement(H2, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 12\n      }\n    }), props.children);\n  } else if (props.type == 'p') {\n    return /*#__PURE__*/React.createElement(P, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 12\n      }\n    }), props.children);\n  } else {\n    return /*#__PURE__*/React.createElement(P, Object.assign({}, props, {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 12\n      }\n    }), \"Unknown text type\");\n  }\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/components/text.jsx"],"names":["React","styled","H1","h1","props","marginTop","color","theme","primary","fontSize","fontWeight","weight","regular","H2","h2","accent","P","p","complement","lineHeight","thin","Text","type","children"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB,C,CACA;AAEA;;AAEA,MAAMC,EAAE,GAAGD,MAAM,CAACE,EAAP,CAAUC,KAAK,KAAK;AAC7BC,EAAAA,SAAS,EAAE,MADkB;AAE7BC,EAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAApB,GAA4BF,KAAK,CAACG,KAAN,CAAYC,OAFlB;AAG7BC,EAAAA,QAAQ,EAAE,MAHmB;AAI7BC,EAAAA,UAAU,EAAEN,KAAK,CAACO,MAAN,GAAeP,KAAK,CAACO,MAArB,GAA8BP,KAAK,CAACG,KAAN,CAAYI,MAAZ,CAAmBC;AAJhC,CAAL,CAAf,CAAX;AAOA,MAAMC,EAAE,GAAGZ,MAAM,CAACa,EAAP,CAAUV,KAAK,KAAK;AAC7BC,EAAAA,SAAS,EAAE,MADkB;AAE7BC,EAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAApB,GAA4BF,KAAK,CAACG,KAAN,CAAYQ,MAFlB;AAG7BN,EAAAA,QAAQ,EAAE,MAHmB;AAI7BC,EAAAA,UAAU,EAAEN,KAAK,CAACO,MAAN,GAAeP,KAAK,CAACO,MAArB,GAA8BP,KAAK,CAACG,KAAN,CAAYI,MAAZ,CAAmBC;AAJhC,CAAL,CAAf,CAAX;AAOA,MAAMI,CAAC,GAAGf,MAAM,CAACgB,CAAP,CAASb,KAAK,KAAK;AAC3BE,EAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAApB,GAA4BF,KAAK,CAACG,KAAN,CAAYW,UADpB;AAE3BT,EAAAA,QAAQ,EAAE,QAFiB;AAG3BU,EAAAA,UAAU,EAAE,MAHe;AAI3BT,EAAAA,UAAU,EAAEN,KAAK,CAACO,MAAN,GAAeP,KAAK,CAACO,MAArB,GAA8BP,KAAK,CAACG,KAAN,CAAYI,MAAZ,CAAmBS;AAJlC,CAAL,CAAd,CAAV;AAOA,eAAe,SAASC,IAAT,CAAejB,KAAf,EAAsB;AACnC;AACA,MAAIA,KAAK,CAACkB,IAAN,KAAe,IAAnB,EAAyB;AACvB,wBAAO,oBAAC,EAAD,oBAAQlB,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAgBA,KAAK,CAACmB,QAAtB,CAAP;AACD,GAFD,MAGK,IAAInB,KAAK,CAACkB,IAAN,KAAe,IAAnB,EAAyB;AAC5B,wBAAO,oBAAC,EAAD,oBAAQlB,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAgBA,KAAK,CAACmB,QAAtB,CAAP;AACD,GAFI,MAGA,IAAInB,KAAK,CAACkB,IAAN,IAAc,GAAlB,EAAsB;AACzB,wBAAO,oBAAC,CAAD,oBAAOlB,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAeA,KAAK,CAACmB,QAArB,CAAP;AACD,GAFI,MAEE;AACL,wBAAO,oBAAC,CAAD,oBAAOnB,KAAP;AAAc,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAP;AACD;AACF","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n// import rgba from './bensLibrary'\n\n// I feel like theres a way to do this with a single function using bracket notation to call 'styled.h1' with 'styled['h1']'\n\nconst H1 = styled.h1(props => ({\n  marginTop: '3rem',\n  color: props.color ? props.color : props.theme.primary,\n  fontSize: '3rem',\n  fontWeight: props.weight ? props.weight : props.theme.weight.regular\n}))\n\nconst H2 = styled.h2(props => ({\n  marginTop: '1rem',\n  color: props.color ? props.color : props.theme.accent,\n  fontSize: '2rem',\n  fontWeight: props.weight ? props.weight : props.theme.weight.regular\n}))\n\nconst P = styled.p(props => ({\n  color: props.color ? props.color : props.theme.complement,\n  fontSize: '1.5rem',\n  lineHeight: '2rem',\n  fontWeight: props.weight ? props.weight : props.theme.weight.thin\n}))\n\nexport default function Text (props) {\n  // there has to be a better way to do this\n  if (props.type === 'h1') {\n    return <H1 {...props}>{props.children}</H1>\n  }\n  else if (props.type === 'h2') {\n    return <H2 {...props}>{props.children}</H2>\n  }\n  else if (props.type == 'p'){\n    return <P {...props}>{props.children}</P>\n  } else {\n    return <P {...props} style={{ color: 'red' }}>Unknown text type</P>\n  }\n}"]},"metadata":{},"sourceType":"module"}