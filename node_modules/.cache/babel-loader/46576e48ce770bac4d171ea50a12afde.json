{"ast":null,"code":"export default function sketch(p, theme) {\n  let canvas;\n  let grid;\n  let cellSize;\n  let bg;\n  let color;\n\n  p.setup = () => {\n    console.log(\"poop\", theme);\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    bg = '#f0f';\n    color = '#0ff';\n    p.noStroke();\n    p.background(bg);\n    cellSize = p.width / 50;\n    canvas.position(0, 0);\n    grid = new Grid(cellSize);\n  };\n\n  p.draw = () => {\n    p.background(bg);\n    grid.update();\n  };\n\n  class Grid {\n    constructor(cellSize) {\n      this.cellSize = cellSize;\n      this.grid = [];\n\n      for (let x = 0; x < p.width; x += cellSize) {\n        let col = [];\n\n        for (let y = 0; y < p.height; y += cellSize) {\n          col.push(new Cell(p.createVector(x + cellSize / 2, y + cellSize / 2), cellSize));\n        }\n\n        this.grid.push(col);\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw();\n        });\n      });\n    }\n\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = newProps => {\n    // if (canvas) {\n    bg = newProps.theme.base;\n    color = newProps.theme.complement; // }\n  };\n\n  class Cell {\n    constructor(pos, cellSize, color) {\n      this.pos = pos;\n      this.cellSize = cellSize;\n    }\n\n    draw() {\n      let mouse = p.createVector(p.mouseX, p.mouseY);\n      let mDist = mouse.dist(this.pos);\n      let scaledSize = this.cellSize * (5 / mDist);\n      if (scaledSize > this.cellSize / 4) scaledSize = cellSize / 4;\n      p.fill(color);\n      p.ellipse(this.pos.x, this.pos.y, scaledSize);\n    }\n\n  }\n}","map":{"version":3,"sources":["/Users/ben/Desktop/react-personalsite/src/particleMesh.js"],"names":["sketch","p","theme","canvas","grid","cellSize","bg","color","setup","console","log","createCanvas","windowWidth","windowHeight","noStroke","background","width","position","Grid","draw","update","constructor","x","col","y","height","push","Cell","createVector","forEach","cell","myCustomRedrawAccordingToNewPropsHandler","newProps","base","complement","pos","mouse","mouseX","mouseY","mDist","dist","scaledSize","fill","ellipse"],"mappings":"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","sourcesContent":["export default function sketch(p, theme) {\n  let canvas  \n  let grid\n  let cellSize\n  let bg\n  let color\n\n  p.setup = () => {\n    console.log(\"poop\", theme)\n    canvas = p.createCanvas(p.windowWidth, p.windowHeight)\n    bg = '#f0f'\n    color= '#0ff'\n    p.noStroke()\n    p.background(bg)\n    cellSize = p.width / 50\n    canvas.position(0, 0)\n    \n    grid = new Grid(cellSize)\n  }\n\n  p.draw = () => {\n    p.background(bg)\n    grid.update()\n  }\n\n  class Grid {\n    constructor(cellSize) {\n      this.cellSize = cellSize\n      this.grid = []\n      for (let x = 0; x < p.width; x += cellSize) {\n        let col = []\n        for (let y = 0; y < p.height; y += cellSize) {\n          col.push(new Cell(p.createVector(x + cellSize/2, y + cellSize/2), cellSize))\n        }\n        this.grid.push(col)\n      }\n    }\n\n    update() {\n      this.grid.forEach(col => {\n        col.forEach(cell => {\n          cell.draw()\n        })\n      })\n    }\n  }\n\n  p.myCustomRedrawAccordingToNewPropsHandler = (newProps) => {\n    // if (canvas) {\n      bg = newProps.theme.base\n      color = newProps.theme.complement\n    // }\n    \n  }\n\n  class Cell {\n    constructor(pos, cellSize, color) {\n      this.pos = pos\n      this.cellSize = cellSize\n    }\n\n    draw() {\n      let mouse = p.createVector(p.mouseX, p.mouseY) \n      let mDist = mouse.dist(this.pos)\n      let scaledSize = this.cellSize * (5 / mDist)\n      \n      if (scaledSize > this.cellSize/4) scaledSize = cellSize/4\n      p.fill(color)\n      p.ellipse(this.pos.x, this.pos.y, scaledSize)\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}